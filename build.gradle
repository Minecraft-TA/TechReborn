buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven {
			// Licenser
			url "https://plugins.gradle.org/m2/"
		}
		maven {
			// GradleStuff
			name = "Modmuss50"
			url = "https://maven.modmuss50.me/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath "gradle.plugin.net.minecrell:licenser:0.2.1"
		classpath 'de.undercouch:gradle-download-task:3.4.3'
		classpath files("libs/GradleStuff-3.0.1.1.jar")
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: Licenser
apply plugin: 'de.undercouch.download'
apply plugin: 'net.covers1624.contained-deps'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	maven {
		// RebornCore, TR Compat
		name = "Modmuss50"
		url = "https://maven.modmuss50.me/"
		}
	maven {
		// JEI
		name "JEI"
		url "https://dvs1.progwml6.com/files/maven"
	}
	maven { // IC2 repo
		name = "ic2"
		url = "https://maven.ic2.player.to/"
	}
}

configurations {
	shade
	compile.extendsFrom shade
}

version = "2.27.3.1084"

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
	version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

minecraft {
	version = "1.12.2-14.23.5.2847"
	mappings = "stable_nodoc_39"
	replace "@MODVERSION@", project.version
	useDepAts = true
	runDir = "run"
}

license {
	header file('HEADER')
	include '**/*.java'
	ignoreFailures = true //Stops the build from failing if a file does not have a license header
}

group = 'TechReborn'

dependencies {
	deobfCompile('RebornCore:RebornCore-1.12.2:+:universal') {
		transitive = false
	}

	shade ('TechReborn:TechReborn-ModCompatibility-1.12.2:+:universal') {
		transitive = false
	}

	deobfCompile "mezz.jei:jei_1.12.2:+"

	deobfProvided "net.industrial-craft:industrialcraft-2:${ic2_version}:api" // IC2 Api
}

processResources
	{
		// this will ensure that this task is redone when the versions change.
		inputs.property "version", project.version
		inputs.property "mcversion", project.minecraft.version

		// replace stuff in mcmod.info, nothing else
		from(sourceSets.main.resources.srcDirs) {
			include 'mcmod.info'

			// replace version and mcversion
			expand 'version': project.version, 'mcversion': project.minecraft.version
		}

		// copy everything else, thats not the mcmod.info
		from(sourceSets.main.resources.srcDirs) {
			exclude 'mcmod.info'
		}

		// Move access transformers to META-INF
		rename '(.+_at.cfg)', 'META-INF/$1'
	}


task deobfJar(type: Jar) {
	from sourceSets.main.output
	exclude "**/*.psd"
	classifier = 'dev'
	manifest {
		attributes 'FMLAT': 'techreborn_at.cfg'
	}
}

/*containedDeps {
	configuration = "shade"
	tasks = "jar"
}*/

jar {
	exclude "**/*.psd"
	classifier = 'universal'
	manifest {
		attributes 'FMLAT': 'techreborn_at.cfg'
	}
}

task apiJar(type: Jar) {
	from sourceSets.main.allSource
	from sourceSets.main.output
	include 'techreborn/api/**/*'

	classifier = "api"
}

apiJar.mustRunAfter deobfJar

build.dependsOn deobfJar, apiJar

publishing {
	publications {
		maven(MavenPublication) {
			groupId 'TechReborn'
			artifactId project.archivesBaseName
			version project.version

			from components.java

			artifact apiJar {
				classifier "api"
			}

			artifact deobfJar {
				classifier "dev"
			}

			artifact sourceJar {
				classifier "sources"
			}
		}
	}
	repositories {
		maven {
			url "http://mavenupload.modmuss50.me/"
			if (project.hasProperty('mavenPass')) {
				credentials {
					username 'buildslave'
					password project.getProperty('mavenPass')
				}
			}
		}
	}
}


//Thanks Matthew from #ForgeGradle https://gist.github.com/matthewprenger/108265e3efc83181bd2cc2d2fc31a853
task updateMappings(dependsOn: sourceJar) {

	def remapped = file('src_remapped/main/java')
	def methods = file('methods.csv')
	def fields = file('fields.csv')

	doLast {

		Map<String, String> map = new HashMap<>()
		methods.eachLine {line ->
			String[] pts = line.split(",")
			map.put(pts[0], pts[1])
		}
		fields.eachLine {line ->
			String[] pts = line.split(",")
			map.put(pts[0], pts[1])
		}

		copy {
			from zipTree(sourceJar.archivePath)
			into remapped
			include '**/*.java'

			filter {javaLine ->
				map.entrySet().each {entry ->
					javaLine = javaLine.replace(entry.getKey(), entry.getValue())
				}
				return javaLine
			}

			includeEmptyDirs = false
			eachFile {println "Processing: $it.name"}
		}
	}
}


task signJar(type: SignJar, dependsOn: reobfJar) {
	onlyIf {
		project.hasProperty('keyStore')
	}

	if (project.hasProperty('keyStore')) {
		keyStore = project.keyStore
		alias = project.keyStoreAlias
		storePass = project.keyStorePass
		keyPass = project.keyStoreKeyPass
		inputFile = jar.archivePath
		outputFile = jar.archivePath
	}

}

build.dependsOn signJar

apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'


import net.minecrell.gradle.licenser.Licenser
import org.apache.commons.io.FileUtils

task curseTools {
	doLast {
		def cacheFiles = new File(".gradle/curseTools")
		if (!cacheFiles.exists()) {
			cacheFiles.mkdirs()
		}

		def mavenMetadata = new File(cacheFiles, "maven-metadata.xml")

		logger.lifecycle(":downloading curseTools metadata")
		FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/maven-metadata.xml"), mavenMetadata)

		def metadata = new XmlSlurper().parseText(FileUtils.readFileToString(mavenMetadata))
		def curseToolsVersion = metadata.versioning.release

		def curseTools = new File(cacheFiles, "${curseToolsVersion}.jar")

		logger.lifecycle(":downloading CurseTools")
		FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/${curseToolsVersion}/CurseTools-${curseToolsVersion}.jar"), curseTools)

		logger.lifecycle(":launching CurseTools")
		ant.java(jar: curseTools.getAbsolutePath(), fork: true, spawn: false) {
			arg(value: jar.archivePath.getAbsolutePath())
			arg(value: deobfJar.archivePath.getAbsolutePath())
			arg(value: apiJar.archivePath.getAbsolutePath())
		}
	}
}

task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
}
